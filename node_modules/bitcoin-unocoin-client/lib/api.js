'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var assert = require('assert');
var Exchange = require('bitcoin-exchange-client');

var API = function (_Exchange$API) {
  _inherits(API, _Exchange$API);

  function API() {
    _classCallCheck(this, API);

    var _this = _possibleConstructorReturn(this, (API.__proto__ || Object.getPrototypeOf(API)).call(this));

    _this._offlineToken = null;
    return _this;
  }

  _createClass(API, [{
    key: 'login',


    // Todo: move login abstraction to exchange client
    value: function login() {
      return Promise.resolve();
    }
  }, {
    key: 'photoUrl',
    value: function photoUrl(filename) {
      return this._url('photos/' + filename);
    }
  }, {
    key: '_url',
    value: function _url(endpoint) {
      endpoint = endpoint || '';
      return 'https://' + (this._production ? 'www' : 'sandbox') + '.unocoin.' + (this._production ? 'com' : 'co') + '/' + endpoint;
    }
  }, {
    key: '_request',
    value: function _request(method, endpoint, data) {
      var extraHeaders = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      var authorized = arguments[4];

      assert(!authorized || this.isLoggedIn, "Can't make authorized request if not logged in");

      var headers = extraHeaders;

      if (authorized) {
        headers['Authorization'] = 'Bearer ' + this._offlineToken;
      }

      return _get(API.prototype.__proto__ || Object.getPrototypeOf(API.prototype), '_request', this).call(this, method, this._url(endpoint), data, headers);
    }

    // Todo: move authRequest abstraction to exchange client

  }, {
    key: '_authRequest',
    value: function _authRequest(method, endpoint, data, extraHeaders) {
      var doRequest = function doRequest() {
        return this._request(method, endpoint, data, extraHeaders, true);
      };

      if (this.isLoggedIn) {
        return doRequest.bind(this)();
      } else {
        return this.login().then(doRequest.bind(this));
      }
    }
  }, {
    key: 'GET',
    value: function GET(endpoint, data, extraHeaders) {
      return this._request('GET', endpoint, data, extraHeaders);
    }
  }, {
    key: 'authGET',
    value: function authGET(endpoint, data, extraHeaders) {
      return this._authRequest('GET', endpoint, data, extraHeaders);
    }
  }, {
    key: 'POST',
    value: function POST(endpoint, data, extraHeaders) {
      return this._request('POST', endpoint, data, extraHeaders);
    }
  }, {
    key: 'authPOST',
    value: function authPOST(endpoint, data, extraHeaders) {
      return this._authRequest('POST', endpoint, data, extraHeaders);
    }
  }, {
    key: 'PATCH',
    value: function PATCH(endpoint, data, extraHeaders) {
      return this._request('PATCH', endpoint, data, extraHeaders);
    }
  }, {
    key: 'authPATCH',
    value: function authPATCH(endpoint, data, extraHeaders) {
      return this._authRequest('PATCH', endpoint, data, extraHeaders);
    }
  }, {
    key: 'DELETE',
    value: function DELETE(endpoint, data, extraHeaders) {
      return this._authRequest('DELETE', endpoint, data, extraHeaders);
    }
  }, {
    key: 'authDELETE',
    value: function authDELETE(endpoint, data, extraHeaders) {
      return this._authRequest('DELETE', endpoint, data, extraHeaders);
    }
  }, {
    key: 'isLoggedIn',
    get: function get() {
      return Boolean(this.offlineToken);
    }
  }, {
    key: 'offlineToken',
    get: function get() {
      return this._offlineToken;
    }
  }, {
    key: 'hasAccount',
    get: function get() {
      return Boolean(this.offlineToken);
    }
  }]);

  return API;
}(Exchange.API);

module.exports = API;