'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Address = require('./address');
var Limits = require('./limits');
var Photo = require('./photo');
var assert = require('assert');

var Profile = function () {
  function Profile(obj, api) {
    _classCallCheck(this, Profile);

    this._api = api;
    this._did_fetch = false;

    this._readOnly = false;
    this._dirty = false;

    this._photos = {
      pancard: null,
      address: null,
      id: null,
      photo: null
    };

    if (obj.user_status > 1) {
      this._readOnly = true;
    }

    this._full_name = obj.name || null;

    this._mobile = obj.phone_number ? '+91' + obj.phone_number : null;

    this._pancard_number = obj.pancard_number || null;

    if (obj.state_city_pin) {
      var _obj$state_city_pin$s = obj.state_city_pin.split('*'),
          _obj$state_city_pin$s2 = _slicedToArray(_obj$state_city_pin$s, 3),
          state = _obj$state_city_pin$s2[0],
          city = _obj$state_city_pin$s2[1],
          pin = _obj$state_city_pin$s2[2];

      this._address = new Address({
        street: obj.address,
        city: city,
        state: state, // TODO: convert to ISO-3116-2
        zipcode: pin
      });
    } else {
      this._address = new Address(null);
    }

    this._address.readOnly = this._readOnly;

    if (obj.photo_img) {
      this._photos.photo = new Photo(null, this._api, obj.photo_img);
    }

    if (obj.passport) {
      this._photos.id = true;
    }

    if (obj.pancard) {
      this._photos.pancard = true;
    }

    if (obj.adhar_dl) {
      // Address proof picture?
      this._photos.address = true;
    }

    this._bankAccountNumber = null;

    this._ifsc = null;

    this._level = obj.user_status;
    // TODO: this ignoobj max_buy_limit (daily?)
    this._currentLimits = new Limits({
      bank: {
        in: obj.user_buy_limit || 0
      }
    });

    this._submittedBankInfo = false;
  }

  _createClass(Profile, [{
    key: 'addPhoto',
    value: function addPhoto(type, base64) {
      switch (type) {
        case 'address':
          this._photos.address = new Photo(base64);
          break;
        case 'pancard':
          this._photos.pancard = new Photo(base64);
          break;
        case 'photo':
          this._photos.photo = new Photo(base64);
          break;
        default:
          assert(false, 'specify address, pancard or photo');
      }
      this._dirty = true;
    }
  }, {
    key: 'verify',
    value: function verify() {
      var _this = this;

      assert(this.level < 2, 'Already submitted');
      assert(this.complete, 'Missing info, always check "complete" first');
      assert(!this.readOnly, 'Profile is read-only');

      var payload = {
        name: this.fullName,
        mobile: this.mobile.replace(/\+91/g, '').replace(/ /g, ''),
        pannumber: this.pancard,
        address: this.address.street,
        state: this.address.state,
        city: this.address.city,
        pincode: this.address.zipcode,
        bank_accnum: this.bankAccountNumber,
        ifsc: this.ifsc,
        pancard_photo: this.photos.pancard.base64.split(',')[1],
        photo: this.photos.photo.base64.split(',')[1],
        address_proof: this.photos.address.base64.split(',')[1]
      };

      return this._api.authPOST('api/blockchain-v1/settings/uploaduserprofile', payload).then(function (res) {
        if (res.status_code === 200) {
          _this._dirty = false;
          _this._address.didSave();

          // TODO: refresh profile to be on the safe side
          _this._level = 2;
          _this._readOnly = true;
          _this._address.readOnly = true;
        } else {
          return Promise.reject(res.message);
        }
      });
    }
  }, {
    key: 'readOnly',
    get: function get() {
      return this._readOnly;
    }
  }, {
    key: 'dirty',
    get: function get() {
      return this._dirty || this._address.dirty;
    }
  }, {
    key: 'photosComplete',
    get: function get() {
      return Boolean(this._photos.address && this._photos.pancard && this.photos.photo);
    }
  }, {
    key: 'identityComplete',
    get: function get() {
      return this.level > 1 || Boolean(this.mobile && this.pancard && this.fullName && this.address.complete);
    }
  }, {
    key: 'bankInfoComplete',
    get: function get() {
      return this.level > 1 || Boolean(this.ifsc && this.bankAccountNumber && this._submittedBankInfo);
    }
  }, {
    key: 'complete',
    get: function get() {
      return this.level > 1 || Boolean(this.photosComplete && this.identityComplete && this.bankInfoComplete);
    }
  }, {
    key: 'address',
    get: function get() {
      return this._address;
    }
  }, {
    key: 'fullName',
    get: function get() {
      return this._full_name;
    },
    set: function set(val) {
      assert(!this.readOnly, 'Read only');
      if (this._full_name !== val) {
        this._dirty = true;
      }
      this._full_name = val;
    }
  }, {
    key: 'mobile',
    get: function get() {
      return this._mobile;
    },
    set: function set(val) {
      assert(!this.readOnly, 'Read only');
      if (this._mobile !== val) {
        this._dirty = true;
      }
      this._mobile = val;
    }
  }, {
    key: 'pancard',
    get: function get() {
      return this._pancard_number;
    },
    set: function set(val) {
      assert(!this.readOnly, 'Read only');
      if (this._pancard_number !== val) {
        this._dirty = true;
      }
      this._pancard_number = val;
    }
  }, {
    key: 'bankAccountNumber',
    get: function get() {
      return this._bank_account_number;
    },
    set: function set(val) {
      assert(!this.readOnly, 'Read only');
      if (this._bank_account_number !== val) {
        this._dirty = true;
      }
      this._bank_account_number = val;
    }
  }, {
    key: 'ifsc',
    get: function get() {
      return this._ifsc;
    },
    set: function set(val) {
      assert(!this.readOnly, 'Read only');
      if (this._ifsc !== val) {
        this._dirty = true;
      }
      this._ifsc = val;
    }
  }, {
    key: 'photos',
    get: function get() {
      return this._photos;
    }
  }, {
    key: 'level',
    get: function get() {
      return this._level;
    }
  }, {
    key: 'currentLimits',
    get: function get() {
      return this._currentLimits;
    }
  }, {
    key: 'submittedBankInfo',
    get: function get() {
      return this._submittedBankInfo;
    },
    set: function set(val) {
      this._submittedBankInfo = val;
    }
  }], [{
    key: 'fetch',
    value: function fetch(api) {
      return api.authGET('api/blockchain-v1/wallet/profiledetails').then(function (res) {
        if (res.status_code === 200) {
          return new Profile(res, api);
        } else {
          return Promise.reject(res.message);
        }
      });
    }
  }]);

  return Profile;
}();

module.exports = Profile;