'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ExchangePaymentMedium = require('bitcoin-exchange-client').PaymentMedium;
var Profile = require('./profile');
var assert = require('assert');

var PaymentMedium = function (_ExchangePaymentMediu) {
  _inherits(PaymentMedium, _ExchangePaymentMediu);

  function PaymentMedium(obj, api, quote, profile) {
    _classCallCheck(this, PaymentMedium);

    var _this = _possibleConstructorReturn(this, (PaymentMedium.__proto__ || Object.getPrototypeOf(PaymentMedium)).call(this, api, quote));

    _this._fiatMedium = 'bank';

    _this._inMedium = 'bank';
    _this._outMedium = 'blockchain';

    _this._inCurrency = 'INR';
    _this._outCurrency = 'BTC';

    // TODO: get these from ticker
    _this._inFixedFee = null;
    _this._outFixedFee = null;
    _this._inPercentageFee = null;
    _this._outPercentageFee = null;

    _this._minimumInAmounts = {
      INR: 1000
    };

    _this.limitInAmounts = {
      // TODO: set INR limit when API provides it, or calculate...
      BTC: profile.currentLimits.bank.inRemaining
    };

    if (quote) {
      _this._fee = 0;
      _this._total = -quote.baseAmount;
    }
    return _this;
  }

  _createClass(PaymentMedium, [{
    key: 'checkMinimum',
    value: function checkMinimum() {
      return -this._quote.baseAmount >= this._minimumInAmounts[this.inCurrency];
    }
  }, {
    key: 'buy',
    value: function buy() {
      assert(this.checkMinimum(), 'Less than minimum buy amount');
      return _get(PaymentMedium.prototype.__proto__ || Object.getPrototypeOf(PaymentMedium.prototype), 'buy', this).call(this).then(function (trade) {
        return trade;
      });
    }
  }], [{
    key: 'getAll',
    value: function getAll(inCurrency, outCurrency, api, quote) {
      // Bank is the only payment type. The Coinify API returns information about
      // trade limits along with their payment types. We mimick this behavior here
      // by calling profiledetails endpoint.

      return Profile.fetch(api).then(function (profile) {
        // Return bank account as a type
        return Promise.resolve({ bank: new PaymentMedium(undefined, api, quote, profile) });
      });
    }
  }]);

  return PaymentMedium;
}(ExchangePaymentMedium);

module.exports = PaymentMedium;