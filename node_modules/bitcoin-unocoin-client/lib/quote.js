'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PaymentMedium = require('./payment-medium');
var Exchange = require('bitcoin-exchange-client');
var Trade = require('./trade');

var Quote = function (_Exchange$Quote) {
  _inherits(Quote, _Exchange$Quote);

  // Amount should be in Rupee or Satoshi
  function Quote(baseAmount, baseCurrency, quoteCurrency, ticker, api, delegate, debug) {
    _classCallCheck(this, Quote);

    // Some random unique UUID will do: http://stackoverflow.com/a/2117523
    var _this = _possibleConstructorReturn(this, (Quote.__proto__ || Object.getPrototypeOf(Quote)).call(this, api, delegate, Trade, PaymentMedium, debug));

    _this._id = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
      var r = Math.random() * 16 | 0;
      var v = c === 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });

    // There's no actual expiration, just setting it to 15 minutes so that
    // the UI refreshes it often enough.
    _this._expiresAt = new Date(new Date().getTime() + 15 * 60 * 1000);

    _this._baseAmount = baseAmount;
    _this._baseCurrency = baseCurrency;
    _this._quoteCurrency = quoteCurrency;

    var buyPrice = ticker.buy.price; // Price per Bitcoin

    // TODO: Fee calculation is probably wrong, but currently not used...
    var buyBeforeFees = ticker.buy.price / (1.00 + (ticker.buy.fee + ticker.buy.tax / 100.0) / 100.0);
    var buyFee = ticker.buy.price - buyBeforeFees; // Fee per 1 BTC

    // Assuming buy:
    if (baseCurrency === 'INR') {
      _this._quoteAmount = Math.round(-_this.baseAmount * 100000000.0 / buyPrice);
      _this._feeCurrency = 'BTC';
      _this._feeAmount = -Math.round(buyFee);
    } else {
      _this._quoteAmount = Math.round(-baseAmount * buyPrice / 100000000);
      _this._feeCurrency = 'INR';
      _this._feeAmount = -Math.round(buyFee);
    }
    return _this;
  }

  // Unocoin API does not have the concept of quotes. Instead, we just get the
  // latest price and wrap in a Quote object.


  _createClass(Quote, [{
    key: 'expire',


    // QA tool
    value: function expire() {
      this._expiresAt = new Date(new Date().getTime() + 3 * 1000);
    }
  }], [{
    key: 'getQuote',
    value: function getQuote(api, delegate, amount, baseCurrency, quoteCurrency, debug) {
      var process = function process(ticker) {
        return new Quote(amount, baseCurrency, quoteCurrency, ticker, api, delegate);
      };

      var getQuote = function getQuote() {
        return process(delegate.ticker);
      };

      return _get(Quote.__proto__ || Object.getPrototypeOf(Quote), 'getQuote', this).call(this, amount, baseCurrency, quoteCurrency, ['BTC', 'INR'], debug).then(getQuote);
    }
  }]);

  return Quote;
}(Exchange.Quote);

module.exports = Quote;