'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var assert = require('assert');

var Address = function () {
  function Address(obj) {
    _classCallCheck(this, Address);

    if (obj) {
      this._street = obj.street;
      this._city = obj.city;
      this._state = obj.state;
      this._zipcode = obj.zipcode;
      this._country = 'IN';
    } else {
      this._street = null;
      this._city = null;
      this._state = null;
      this._zipcode = null;
      this._country = 'IN';
    }

    this._dirty = false;
  }

  _createClass(Address, [{
    key: 'didSave',
    value: function didSave() {
      this._dirty = false;
    }
  }, {
    key: 'dirty',
    get: function get() {
      return this._dirty;
    }
  }, {
    key: 'readOnly',
    get: function get() {
      return this._readOnly;
    },
    set: function set(val) {
      this._readOnly = val;
    }
  }, {
    key: 'complete',
    get: function get() {
      return Boolean(this._street && this._city && this._state && this._zipcode);
    }
  }, {
    key: 'city',
    get: function get() {
      return this._city;
    },
    set: function set(val) {
      assert(!this.readOnly, 'Read only');
      if (this._city !== val) {
        this._dirty = true;
      }
      this._city = val;
    }
  }, {
    key: 'country',
    get: function get() {
      return this._country;
    },
    set: function set(val) {
      assert(!this.readOnly, 'Read only');
      if (this._country !== val) {
        this._dirty = true;
      }
      this._country = val;
    }

    // TODO: use ISO 3166-2 instead of full name (the part after the dash)

  }, {
    key: 'state',
    get: function get() {
      return this._state;
    },
    set: function set(val) {
      assert(!this.readOnly, 'Read only');
      if (this._state !== val) {
        this._dirty = true;
      }
      this._state = val;
    }
  }, {
    key: 'street',
    get: function get() {
      return this._street;
    },
    set: function set(val) {
      assert(!this.readOnly, 'Read only');
      if (this._street !== val) {
        this._dirty = true;
      }
      this._street = val;
    }
  }, {
    key: 'zipcode',
    get: function get() {
      return this._zipcode;
    },
    set: function set(val) {
      assert(!this.readOnly, 'Read only');
      if (this._zipcode !== val) {
        this._dirty = true;
      }
      this._zipcode = val;
    }
  }]);

  return Address;
}();

module.exports = Address;